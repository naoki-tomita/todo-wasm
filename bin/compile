#!/usr/bin/env bash
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}




install_nodejs() {
  local version=${1:-12.x}
  local dir="${2:?}"
  local code os cpu resolve_result

  os=$(get_os)
  cpu=$(get_cpu)

  echo "Resolving node version $version..."
  resolve_result=$(resolve node "$version" || echo "failed")

  read -r number url < <(echo "$resolve_result")

  if [[ "$resolve_result" == "failed" ]]; then
    fail_bin_install node "$version"
  fi

  echo "Downloading and installing node $number..."
  code=$(curl "$url" -L --silent --fail --retry 5 --retry-max-time 15 -o /tmp/node.tar.gz --write-out "%{http_code}")
  if [ "$code" != "200" ]; then
    echo "Unable to download node: $code" && false
  fi
  tar xzf /tmp/node.tar.gz -C /tmp
  rm -rf "${dir:?}"/*
  mv /tmp/node-v"$number"-"$os"-"$cpu"/* "$dir"
  chmod +x "$dir"/bin/*
}

install_npm() {
  local npm_version
  local version="$1"
  local dir="$2"
  local npm_lock="$3"
  npm_version="$(npm --version)"

  # If the user has not specified a version of npm, but has an npm lockfile
  # upgrade them to npm 5.x if a suitable version was not installed with Node
  if $npm_lock && [ "$version" == "" ] && [ "${npm_version:0:1}" -lt "5" ]; then
    echo "Detected package-lock.json: defaulting npm to version 5.x.x"
    version="5.x.x"
  fi

  if [ "$version" == "" ]; then
    echo "Using default npm version: $npm_version"
  elif [[ "$npm_version" == "$version" ]]; then
    echo "npm $npm_version already installed with node"
  else
    echo "Bootstrapping npm $version (replacing $npm_version)..."
    if ! npm install --unsafe-perm --quiet -g "npm@$version" 2>@1>/dev/null; then
      echo "Unable to install npm $version; does it exist?" && false
    fi
    echo "npm $version installed"
  fi
}


export PATH="$HOME/.heroku/node/bin:$HOME/.heroku/yarn/bin:$PATH:$HOME/bin:$HOME/node_modules/.bin"
export NODE_HOME="$HOME/.heroku/node"
export NODE_ENV=${NODE_ENV:-production}

# Switch to our cache directory.
mkdir -p "$CACHE_DIR"
cd "$CACHE_DIR"

BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)
cat <<EOF > $BP_DIR/export
# Our rustup installation.
export RUSTUP_HOME="$CACHE_DIR/multirust"
# Our cargo installation.  We implicitly trust Rustup and Cargo
# to do the right thing when new versions are released.
export CARGO_HOME="$CACHE_DIR/cargo"
# Include binaries installed by cargo and rustup in our path.
PATH="\$CARGO_HOME/bin:\$PATH"
EOF
. $BP_DIR/export

echo "-----> Setup for rust environment"
if [ -d "$CARGO_HOME" ]; then
    echo "-----> Checking for new releases of Rust nightly channel"
    # It's possible that $VERSION has changed, or the `stable` channel has updated.
    rustup self update
    rustup update nightly
    rustup default nightly
else
    echo "-----> Downloading rustup"
    curl https://sh.rustup.rs -sSf > rustup.sh
    chmod u+x rustup.sh
    echo "-----> Using rustup to install Rust channel $VERSION"
    ./rustup.sh -y --default-toolchain nightly
    rm rustup.sh
fi
if [ ! -x "$CARGO_HOME/bin/rustc" ]; then
  echo "failed: Cannot find Rust binaries at $CARGO_HOME"
  exit 1
fi

if [ ! -x "cargo web -V" ]; then
  cargo install cargo-web
fi


# This is where we will cache our Rust output.  Note the suggestions at
# https://github.com/alexcrichton/cargo/commit/014765f788ca1c2476936835ca32cc2746f99b42
# which describe how this needs to be named.
export CARGO_TARGET_DIR="$CACHE_DIR/target"

echo "-----> Building SERVER application using Cargo"
cd $BUILD_DIR/server
cargo build --release
mkdir -p target/release
cp $CARGO_TARGET_DIR/release/server target/release

echo "-----> Building FRONT application using Cargo"
cd $BUILD_DIR/full-app
cargo web deploy
mkdir -p target/deploy
cp -r $CARGO_TARGET_DIR/deploy/* target/deploy

mkdir -p $BUILD_DIR/.heroku/node
install_nodejs 12.x $BUILD_DIR/.heroku/node
# mkdir -p $BUILD_DIR/.heroku/npm
# install_npm 6 $BUILD_DIR/.heroku/node false
